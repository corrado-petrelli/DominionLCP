package rules

import com.project.Player;
import com.project.Action;
import com.project.cards.Card;
import com.project.cards.kingdoms.*;
import com.project.cards.treasures.*;
import com.project.cards.victories.*;
import com.project.cards.curses.*;
import java.util.*;

//List of trash cards
global List<Card> trashPile;
//Random logic
global Random gameLogic;


/*
		FUNCTIONS
*/
//A Player *p* draw *amound* cards from the deck
function void draw(Player p, int amount) {
	if(p.getDeck().size() < amount) {
					int deckSize = p.getDeck().size();
					for(int h = 0; h < deckSize; h++)
						p.addToHand(p.getDeck().remove(0));
					// the remaining cards are drawn after shuffling together deck and discard
					Collections.shuffle(p.getDiscard());
					for (Card card : p.getDiscard()) {
						p.addToDeck(card);
					}
					p.getDiscard().clear();
					for(int j = 0; j < amount-deckSize; j++) 
						p.addToHand(p.getDeck().remove(0));
				} else 
					for(int j = 0; j < 5; j++) 
					p.addToHand(p.getDeck().remove(0));
	System.out.println(p.getUsername() + " drew " + amount + " cards.");
}

//A player *p* obtain *amount* virtual coins
function void coin(Player p, int amount) {
	p.setVirtualCoins(p.getVirtualCoins()+amount);
	System.out.println(p.getUsername() + " obtained " + amount + " coins and has a total of:" + p.getVirtualCoins());
}

//A player *p* buy a card *c*
function void buy(Player p, Card c) {
	p.getDiscard().add(c);
	System.out.println(p.getUsername() + " bought " + c.getName());
}

//A player *p* is cursed!
function void beCursed(Player p) {
	p.getDiscard().add(new com.project.cards.curses.Curse());
	System.out.println(p.getUsername() + " obtained a Curse");
}

//A player *p* discard *amount* card (in random way)
function void discard(Player p, int amount) {
	Random r = new Random();
	for(int i = 0; i < amount; i++) {
		p.getHand().remove(r.nextInt(p.getHand().size()));
	}
	System.out.println(p.getUsername() + " discarded " + amount + " cards.");
}

//A player *p* add from discard pile *amount* card in random way
function void addFromDiscardPile(Player p, int amount) {
	Random r = new Random();
	for(int i = 0; i < amount; i++) {
		Card c = p.getDiscard().remove(r.nextInt(p.getDiscard().size()));
		p.getHand().add(c);
		System.out.println(p.getUsername() + " added " + c.getName() + " from his/her discard pile.");
	}
	System.out.println(p.getUsername() + " added a total of " + amount + " cards from his/her discard pile.");
}


function void addActions(Player p, int amount) {
	p.setActions(p.getActions()+amount);
	System.out.println(p.getUsername() + " can do " + amount + " more actions.");
}


function void addPurchase(Player p, int amount) {
	p.setPurchases(p.getPurchases()+amount);
	System.out.println(p.getUsername() + " can purchase " + amount + " more cards.");
}

/*
function void trash(Player p, Card c) {
	p.getHand().remove(index);
	trashPile.add(c);
}
*/




/*
--------------------------------------
		PLAY TREASURES
--------------------------------------
*/

rule "Play Copper card"
	when
		$player : Player( $username : username )
		$card : Copper( $amount : value )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		coin($player,$amount);
		retract($player)
		retract($card)
		retract($action)
end

rule "Buy Copper card"
	when
		$player : Player( $username : username )
		$card : Copper(  )
		$action : Action( this == Action.BUY )
	then
		buy($player,$card);
		retract($player)
		retract($card)
		retract($action)
end

rule "Play Silver card"
	when
		$player : Player( $username : username )
		$card : Silver( $amount : value )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		coin($player,$amount);
		retract($player)
		retract($card)
		retract($action)
end

rule "Buy Silver card"
	when
		$player : Player( $username : username )
		$card : Silver(  )
		$action : Action( this == Action.BUY )
	then
		buy($player,$card);
		retract($player)
		retract($card)
		retract($action)
end

rule "Play Gold card"
	when
		$player : Player( $username : username )
		$card : Copper( $amount : value )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		coin($player,$amount);
		retract($player)
		retract($card)
		retract($action)
end

rule "Buy Gold card"
	when
		$player : Player( $username : username )
		$card : Gold(  )
		$action : Action( this == Action.BUY )
	then
		buy($player,$card);
		retract($player)
		retract($card)
		retract($action)
end

/*

--------------------------------------
		BUY VICTORIES
--------------------------------------
                                                                                               
*/
rule "Buy Estate card"
	when
		$player : Player( $username : username )
		$card : Estate(  )
		$action : Action( this == Action.BUY )
	then
		buy($player,$card);
		retract($player)
		retract($card)
		retract($action)
end

rule "Buy Duchy card"
	when
		$player : Player( $username : username )
		$card : Duchy(  )
		$action : Action( this == Action.BUY )
	then
		buy($player,$card);
		retract($player)
		retract($card)
		retract($action)
end

rule "Buy Province card"
	when
		$player : Player( $username : username )
		$card : Province(  )
		$action : Action( this == Action.BUY )
	then
		buy($player,$card);
		retract($player)
		retract($card)
		retract($action)
end
/*
rule "Play Witch card"
	when
		$player : Player( $username : username )
		$opponents : List(  )
		$card : Witch(  )
		$action : Action( this == Action.USE )
	then
		buy($player,$card);
		retract($player)
		retract($card)
		retract($action)
end
*/


/*
--------------------------------------
		PLAY AND BUY KINGDOMS
--------------------------------------
*/
rule "Play Cellar card"
	when
		$player : Player( $username : username )
		$card : Cellar( $amount : amount )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		discard($player,$amount);
		draw($player,$amount);
		retract($player)
		retract($card)
		retract($action)
end

rule "Buy Cellar card"
	when
		$player : Player( $username : username )
		$card : Cellar(  )
		$action : Action( this == Action.BUY )
	then
		buy($player,$card);
		retract($player)
		retract($card)
		retract($action)
end

rule "Play Chapel card"
	when
		$player : Player( $username : username )
		$card : Chapel( $amount : amount )
		$action : Action( this == Action.USE )
	then
		
		System.out.println($username+" used "+$card.getName()+".");
		// trash cards here
		retract($player)
		retract($card)
		retract($action)
end

rule "Buy Chapel card"
	when
		$player : Player( $username : username )
		$card : Chapel(  )
		$action : Action( this == Action.BUY )
	then
		buy($player,$card);
		retract($player)
		retract($card)
		retract($action)
end

rule "Play Moat card"
	when
		$player : Player( $username : username )
		$card : Moat(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,2);
		retract($player)
		retract($card)
		retract($action)
end

rule "Buy Moat card"
	when
		$player : Player( $username : username )
		$card : Moat(  )
		$action : Action( this == Action.BUY )
	then
		buy($player,$card);
		retract($player)
		retract($card)
		retract($action)
end
/*
rule "Play Harbinger card"
	when
		$player : Player( $username : username )
		$card : Harbinger(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used Harbinger.");
		draw($player,1);
		addActions($player,1);
		if(gameLogic.nextBoolean()) {
			addFromDiscardPile($player,1);
		}
		retract($player)
		retract($card)
		retract($action)
end
*/

rule "Play Village card"
	when
		$player : Player( $username : username )
		$card : Village(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,1);
		addActions($player,2);
		retract($player)
		retract($card)
		retract($action)
end

rule "Buy Village card"
	when
		$player : Player( $username : username )
		$card : Village(  )
		$action : Action( this == Action.BUY )
	then
		buy($player,$card);
		retract($player)
		retract($card)
		retract($action)
end

rule "Play Smithy card"
	when
		$player : Player( $username : username )
		$card : Smithy(  )
		// I need the action to understand what the player will do with that card
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,3);
		retract($player)
		retract($card)
		retract($action)
end

rule "Buy Smithy card"
	when
		$player : Player( $username : username )
		$card : Smithy(  )
		$action : Action( this == Action.BUY )
	then
		buy($player,$card);
		retract($player)
		retract($card)
		retract($action)
end

rule "Play Market card"
	when
		$player : Player( $username : username )
		$card : Market(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,1);
		addActions($player,1);
		addPurchase($player,1);
		coin($player,1);
		retract($player)
		retract($card)
		retract($action)
end

rule "Buy Market card"
	when
		$player : Player( $username : username )
		$card : Market(  )
		$action : Action( this == Action.BUY )
	then
		buy($player,$card);
		retract($player)
		retract($card)
		retract($action)
end

rule "Play Militia card"
	when
		$player : Player( $username : username )
		$opponents : ArrayList(  )
		$card : Militia(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		coin($player,2);
		for(Player p : $opponents) {
			if(!p.getHand().contains(new Moat()))
				discard(p,2);
		}
		retract($player)
		retract($opponents)
		retract($card)
		retract($action)
end

rule "Buy Militia card"
	when
		$player : Player( $username : username )
		$card : Militia(  )
		$action : Action( this == Action.BUY )
	then
		buy($player,$card);
		retract($player)
		retract($card)
		retract($action)
end

rule "Play Mine card"
	when
		$player : Player( $username : username )
		$card : Mine(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,1);
		addActions($player,1);
		addPurchase($player,1);
		coin($player,1);
		retract($player)
		retract($card)
		retract($action)
end

rule "Buy Mine card"
	when
		$player : Player( $username : username )
		$card : Mine(  )
		$action : Action( this == Action.BUY )
	then
		buy($player,$card);
		retract($player)
		retract($card)
		retract($action)
end

rule "Play Remodel card"
	when
		$player : Player( $username : username )
		$card : Remodel(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,1);
		addActions($player,1);
		addPurchase($player,1);
		coin($player,1);
		retract($player)
		retract($card)
		retract($action)
end

rule "Buy Remodel card"
	when
		$player : Player( $username : username )
		$card : Remodel(  )
		$action : Action( this == Action.BUY )
	then
		buy($player,$card);
		retract($player)
		retract($card)
		retract($action)
end

rule "Play Woodcutter card"
	when
		$player : Player( $username : username )
		$card : Woodcutter(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		addPurchase($player,1);
		coin($player,2);
		retract($player)
		retract($card)
		retract($action)
end

rule "Buy Woodcutter card"
	when
		$player : Player( $username : username )
		$card : Woodcutter(  )
		$action : Action( this == Action.BUY )
	then
		buy($player,$card);
		retract($player)
		retract($card)
		retract($action)
end

rule "Play Workshop card"
	when
		$player : Player( $username : username )
		$card : Workshop(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		addPurchase($player,1);
		coin($player,2);
		retract($player)
		retract($card)
		retract($action)
end

rule "Buy Workshop card"
	when
		$player : Player( $username : username )
		$card : Workshop(  )
		$action : Action( this == Action.BUY )
	then
		buy($player,$card);
		retract($player)
		retract($card)
		retract($action)
end

rule "Play Library card"
	when
		$player : Player( $username : username )
		$card : Library(  )
		$action : Action( this == Action.USE )
	then
		int lastHandSize = $player.getHand().size();
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,Math.max(7,Math.abs(7-$player.getHand().size())));
		// you may put cards aside as you draw and at the end discard them
		retract($player)
		retract($card)
		retract($action)
end

rule "Buy Library card"
	when
		$player : Player( $username : username )
		$card : Library(  )
		$action : Action( this == Action.BUY )
	then
		buy($player,$card);
		retract($player)
		retract($card)
		retract($action)
end