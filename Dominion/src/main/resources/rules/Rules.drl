package rules

import com.project.Player;
import com.project.Action;
import com.project.Phase;
import com.project.Table;
import com.project.cards.Card;
import com.project.cards.kingdoms.*;
import com.project.cards.treasures.*;
import com.project.cards.victories.*;
import com.project.cards.curses.*;
import java.util.*;

//List of trash cards
global List<Card> trashPile;
//Random logic
global Random gameLogic;
//Actual player if used as global variable is read only
//global Player actualPlayer;
//Table
global Table table;
//Players
global List<Player> players;

/*
 _______  __   __  __    _  _______  _______  ___   _______  __    _  _______ 
|       ||  | |  ||  |  | ||       ||       ||   | |       ||  |  | ||       |
|    ___||  | |  ||   |_| ||       ||_     _||   | |   _   ||   |_| ||  _____|
|   |___ |  |_|  ||       ||       |  |   |  |   | |  | |  ||       || |_____ 
|    ___||       ||  _    ||      _|  |   |  |   | |  |_|  ||  _    ||_____  |
|   |    |       || | |   ||     |_   |   |  |   | |       || | |   | _____| |
|___|    |_______||_|  |__||_______|  |___|  |___| |_______||_|  |__||_______|
*/
//A Player *p* draw *amound* cards from the deck
function void draw(Player p, int amount) {
	if(p.getDeck().size() < amount) {
		int deckSize = p.getDeck().size();
		for(int h = 0; h < deckSize; h++)
			p.addToHand(p.getDeck().remove(0));
		// the remaining cards are drawn after shuffling together deck and discard
		Collections.shuffle(p.getDiscard());
		p.getDeck().addAll(p.getDiscard());
		p.getDiscard().clear();
		for(int j = 0; j < amount-deckSize; j++) 
			p.addToHand(p.getDeck().remove(0));
	} else 
		for(int j = 0; j < amount; j++) 
		p.addToHand(p.getDeck().remove(0));
	System.out.println(p.getUsername() + " drew " + amount + " cards.");
}

//A player *p* obtain *amount* virtual coins
function void coin(Player p, int amount) {
	p.setVirtualCoins(p.getVirtualCoins()+amount);
	System.out.println(p.getUsername() + " obtained " + amount + " coins and has a total of:" + p.getVirtualCoins());
}

//A player *p* buy a card *c*
function void buy(Player p, Card c) {
	p.getDiscard().add(c);
	System.out.println(p.getUsername() + " bought " + c.getName());
}

function void gainOntoDeck(Table table, Player p, Card c) {
	if(table.checkDeckSize(c) > 0) {
		p.getDeck().add(0,c);
		table.decreaseDeckSize(c);
	}
}

function void gainIntoDiscardPile(Table table, Player p, Card c) {
	if(table.checkDeckSize(c) > 0) {
		p.getDiscard().add(c);
		table.decreaseDeckSize(c);
	}
}

//A player *p* is cursed!
function void beCursed(Player p) {
	p.getDiscard().add(new com.project.cards.curses.Curse());
	System.out.println(p.getUsername() + " obtained a Curse");
}

//A player *p* discard *amount* card (in random way)
function void discard(Player p, int amount) {
	Random r = new Random();
	for(int i = 0; i < amount; i++) {
		int j = r.nextInt(p.getHand().size());
		Card c = p.getHand().get(j);
		p.getHand().remove(j);
		p.getDiscard().add(c);
	}
	System.out.println(p.getUsername() + " discarded " + amount + " cards.");
}

//A player *p* add from discard pile *amount* card in random way
function void addFromDiscardPile(Player p, int amount) {
	Random r = new Random();
	for(int i = 0; i < amount; i++) {
		Card c = p.getDiscard().remove(r.nextInt(p.getDiscard().size()));
		p.getHand().add(c);
		System.out.println(p.getUsername() + " added " + c.getName() + " from his/her discard pile.");
	}
	System.out.println(p.getUsername() + " added a total of " + amount + " cards from his/her discard pile.");
}


function void addActions(Player p, int amount) {
	p.setActions(p.getActions()+amount);
	System.out.println(p.getUsername() + " can do " + amount + " more actions.");
}


function void addPurchase(Player p, int amount) {
	p.setPurchases(p.getPurchases()+amount);
	System.out.println(p.getUsername() + " can purchase " + amount + " more cards.");
}

/*
function void trash(Player p, Card c) {
	p.getHand().remove(index);
	trashPile.add(c);
}
*/


rule "Switch Turn"
	when
		$action : Phase( this == Phase.ENDTURN )
		actualPlayer : Player(  )
		
	then
		System.out.println(actualPlayer.getUsername() + " ENDED its turn");
		int indexActualPlayer = players.indexOf(actualPlayer);
		//If the actual player is the last player of the list
		if(indexActualPlayer == players.size() - 1){
			actualPlayer = (Player)players.get(0);
		} else {
			actualPlayer = (Player)players.get(indexActualPlayer+1);
		}
		System.out.println("________________________________________________");
		System.out.println("Now it's the turn of " + actualPlayer.getUsername());
		//Reset the number of Actions and Purchases to the default value (1)
		actualPlayer.setActions(1);
		actualPlayer.setPurchases(1);
		
		retract($action);
		insert(Phase.ACTION);
		//Retract and insert combo is used to make the next rule fire
		//since update is not working
		retract(actualPlayer);
		insert(actualPlayer);
end




rule "Action Phase Rule"
	no-loop
	//According to us we must give an order:
	//	1 - player choose the card from the hand
	//	2 - it Plays the card
	//	3 - Goto 1 and repeat until player has available actions
	salience 10
	when
		$phase : Phase( this == Phase.ACTION )
		actualPlayer : Player(  )
		
	then
		System.out.println(actualPlayer.getUsername() + " entered ACTION phase rule");
		System.out.println(actualPlayer.playerInfo());
		if(actualPlayer.getActions() > 0) {
			Card kingdomCardToPlay = actualPlayer.getPlayableKingdomCardFromHand();
			if(kingdomCardToPlay != null)
				System.out.println(actualPlayer.getUsername() + " choses to play: " + kingdomCardToPlay.getName());
			else
				System.out.println(actualPlayer.getUsername() + " has no Action cards in hand");
			if(kingdomCardToPlay != null) {
				insert(Action.USE);
				insert(kingdomCardToPlay);
				actualPlayer.decreaseActions();
				System.out.println(actualPlayer.getUsername() + " played " + kingdomCardToPlay.getName());
			} else {
				System.out.println(actualPlayer.getUsername() + " skipped action phase");
				actualPlayer.setActions(0);
				retract($phase);
				insert(Phase.PURCHASE);
				insert(Action.PLAYALLCOINS);
			}
		} else {
			System.out.println(actualPlayer.getUsername() + " has no more actions left, action phase terminates");
			retract($phase);
			insert(Phase.PURCHASE);
			insert(Action.PLAYALLCOINS);
		}
end


/*
 _______  ___      _______  __   __                                                
|       ||   |    |   _   ||  | |  |                                               
|    _  ||   |    |  |_|  ||  |_|  |                                               
|   |_| ||   |    |       ||       |                                               
|    ___||   |___ |       ||_     _|                                               
|   |    |       ||   _   |  |   |                                                 
|___|    |_______||__| |__|  |___|                                                 
 _______  ______    _______  _______  _______  __   __  ______    _______  _______ 
|       ||    _ |  |       ||   _   ||       ||  | |  ||    _ |  |       ||       |
|_     _||   | ||  |    ___||  |_|  ||  _____||  | |  ||   | ||  |    ___||  _____|
  |   |  |   |_||_ |   |___ |       || |_____ |  |_|  ||   |_||_ |   |___ | |_____ 
  |   |  |    __  ||    ___||       ||_____  ||       ||    __  ||    ___||_____  |
  |   |  |   |  | ||   |___ |   _   | _____| ||       ||   |  | ||   |___  _____| |
  |___|  |___|  |_||_______||__| |__||_______||_______||___|  |_||_______||_______|
*/

//WE need these rules because of the merchant card

rule "Play Copper card"
	salience 13
	when
		$player : Player( $username : username )
		$card : Copper( $amount : value )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.PURCHASE )
		not Action( this == Action.ALLCOINSPLAYED )
	then
		System.out.println($username+" used "+$card.getName()+".");
		coin($player,$amount);
		
		//retract($card)
		//retract($action)
end

rule "Normal Play Silver card"
	salience 14
	when
		$player : Player( $username : username )
		$card : Silver( $amount : value )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.PURCHASE )
		not Action( this == Action.PENDINGSILVER )
		not Action( this == Action.ALLCOINSPLAYED )
	then
		System.out.println($username+" used "+$card.getName()+".");
		coin($player,$amount);
		
		//retract($card)
		//retract($action)
end

rule "Play Silver card after merchant"
	salience 13
	when
		$player : Player( $username : username )
		$card : Silver( $amount : value )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.PURCHASE )
		$token : Action( this == Action.PENDINGSILVER )
		not Action( this == Action.ALLCOINSPLAYED )
	then
		System.out.println($username+" used "+$card.getName()+".");
		coin($player,$amount);
		coin($player,1);
		
		//retract($card)
		//retract($action)
		retract($token)
end

rule "Play Gold card"
	salience 13
	when
		$player : Player( $username : username )
		$card : Gold( $amount : value )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.PURCHASE )
		not Action( this == Action.ALLCOINSPLAYED )
	then
		System.out.println($username+" used "+$card.getName()+".");
		coin($player,$amount);
		
		//retract($card)
		//retract($action)
end


/*
 _______  __   __  __   __                                                  
|  _    ||  | |  ||  | |  |                                                 
| |_|   ||  | |  ||  |_|  |                                                 
|       ||  |_|  ||       |                                                 
|  _   | |       ||_     _|                                                 
| |_|   ||       |  |   |                                                   
|_______||_______|  |___|                                                   
 __   __  ___   _______  _______  _______  ______    ___   _______  _______ 
|  | |  ||   | |       ||       ||       ||    _ |  |   | |       ||       |
|  |_|  ||   | |       ||_     _||   _   ||   | ||  |   | |    ___||  _____|
|       ||   | |       |  |   |  |  | |  ||   |_||_ |   | |   |___ | |_____ 
|       ||   | |      _|  |   |  |  |_|  ||    __  ||   | |    ___||_____  |
 |     | |   | |     |_   |   |  |       ||   |  | ||   | |   |___  _____| |
  |___|  |___| |_______|  |___|  |_______||___|  |_||___| |_______||_______|                                                                                               
*/
/*
rule "Buy Victories card"
	when
		$player : Player( $username : username )
		$card : Victory(  )
		$action : Action( this == Action.BUY )
	then
		buy($player,$card);
		retract($player)
		retract($card)
		retract($action)
end
*/

rule "Remove all coins played"
	salience 12
	when
		$phase : Phase( this == Phase.PURCHASE )
		$coins : Treasure(  )
		//non posso usare questo perche la action.USE non me la toglie
		//nessuno dopo che ho giocato i coin
		//not Action( this == Action.USE )
		$action2 : Action( this == Action.USE )
		$action : Action( this == Action.COINSNEEDTOBEGARBAGED )
		
	then
		System.out.println("garbage collecting all the coins ... " + $coins.getName());
		retract($coins);
		//retract($action);
		
		//Need to reinsert because it needs to fire the rule again
		//insert(Action.COINSNEEDTOBEGARBAGED);
		//retract(Action.ALLCOINSPLAYED);
		insert(Action.ALLCOINSPLAYED);
		
		
end

rule "Buy a general card"
	salience 13
	when
		$phase : Phase( this == Phase.PURCHASE )
		actualPlayer : Player(  )
		$action : Action( this == Action.BUY )
		$card : Card(  )
	then
		buy(actualPlayer,$card);
		retract($action);
		
		retract($card);
		//Need to fire again the purchase phase rule
		retract(Action.ALLCOINSPLAYED);
		insert(Action.ALLCOINSPLAYED);
end

rule "Play all treasures in hand"
	when
		$phase : Phase( this == Phase.PURCHASE )
		actualPlayer : Player(  )
		$action : Action( this == PLAYALLCOINS )
	then
		System.out.println(actualPlayer.getUsername() + " is now on purchase phase");
		System.out.println(actualPlayer.getUsername() + " will now play all treasures in hand");
		int playedTreasures = 0;
		for(Iterator<Card> it = actualPlayer.getHand().iterator(); it.hasNext(); ) {
			Card c = it.next();
			//If the card is a treasure, play it
			if(c instanceof Treasure) {
				playedTreasures++;
				insert(c);
				insert(Action.USE);
				actualPlayer.getDiscard().add(c);
				it.remove();
			}
		}
		retract($action);
		if(playedTreasures > 0) {
			insert(Action.COINSNEEDTOBEGARBAGED);
		} else {
		//No coins played, simulate it through tokens
			insert(Action.USE);
			insert(Action.COINSNEEDTOBEGARBAGED);
			insert(Action.ALLCOINSPLAYED);
		}
		
		
end

rule "Purchase Phase rule"
	salience 12
	when 
		$phase : Phase( this == Phase.PURCHASE )
		actualPlayer : Player(  )
		//this must be removed at the end
		$action3 : Action( this == Action.USE )
		//this must be removed at the end, we keep it just to make this rule fire
		$action2 : Action( this == Action.COINSNEEDTOBEGARBAGED )
		$action : Action( this == Action.ALLCOINSPLAYED )
	then
		//Retract all coins played otherwise player will buy one of them
		//retract($card);
		
		System.out.println(actualPlayer.getUsername() + " passed to ACTUAL PURCHASE phase");
		Card cardToBuy = null;
		
		if(actualPlayer.getPurchases() > 0) {
			//actualPlayer.playAllTreasureCardsInHand();
			//Because of the merchant card, we need to play treasures
			//inside drools instead of getting all of them played in player
			
			
			
			//Choose a card to buy randomly from the 7 data structures holding decks in table
			List<Card> ca = table.getAllCardsThatCanBeBoughtWithAmountOfCoins(actualPlayer.getVirtualCoins());
			System.out.println("ca size: " + ca.size());
			int randomInt = 0;
			if(ca.size() > 0) {
				randomInt = gameLogic.nextInt(ca.size());
				cardToBuy = ca.get(randomInt);
				System.out.println(actualPlayer.getUsername() + " chooses to buy: " + cardToBuy.getName());
				//If I choose a card
				if(cardToBuy != null){
					//I remove the virtual coins of the card
					actualPlayer.decreaseVirtualCoins(cardToBuy.getCost());
					actualPlayer.decreasePurchases();
					table.decreaseDeckSize(cardToBuy);
					insert(Action.BUY);
					insert(cardToBuy);
						
					
				}
			} else {
				System.out.println("No cards can be bought, phase skipped");
				retract($phase);
				retract($action);
				retract($action2);
				retract($action3);
				insert(Phase.CLEANUP);
			}
			
		} else {
			System.out.println(actualPlayer.getUsername() + " has no more purchases or no treasures to play");
			retract($phase);
			retract($action);
			retract($action2);
			retract($action3);
			insert(Phase.CLEANUP);
		}
end

rule "Cleanup phase rule"
	when
		$phase : Phase( this == Phase.CLEANUP )
		actualPlayer : Player(  )
		
	then
		System.out.println(actualPlayer.getUsername() + " is now on CLEANUP phase");
		actualPlayer.getDiscard().addAll(actualPlayer.getHand());
		System.out.println(actualPlayer.getUsername() + " discarded the hand");
		actualPlayer.getHand().clear();
		actualPlayer.setVirtualCoins(0);
		draw(actualPlayer,5);
		//Check if end game conditions are satisifed at the end of each turn
		table.checkEndGame();
		System.out.println("End game conditions checked");
		retract($phase);
		if(table.getSituation() != 2) {
			//retract($action);
			insert(Phase.ENDTURN);
		} else {
			insert(Phase.ENDGAME);
		}
		
end



/*
 _______  ___      _______  __   __                         
|       ||   |    |   _   ||  | |  |                        
|    _  ||   |    |  |_|  ||  |_|  |                        
|   |_| ||   |    |       ||       |                        
|    ___||   |___ |       ||_     _|                        
|   |    |       ||   _   |  |   |                          
|___|    |_______||__| |__|  |___|                          
 ___   _  ___   __    _  _______  ______   _______  __   __ 
|   | | ||   | |  |  | ||       ||      | |       ||  |_|  |
|   |_| ||   | |   |_| ||    ___||  _    ||   _   ||       |
|      _||   | |       ||   | __ | | |   ||  | |  ||       |
|     |_ |   | |  _    ||   ||  || |_|   ||  |_|  ||       |
|    _  ||   | | | |   ||   |_| ||       ||       || ||_|| |
|___| |_||___| |_|  |__||_______||______| |_______||_|   |_|
*/



/*
--------------------------------------
		PLAY AND BUY KINGDOMS
--------------------------------------
*/

//Gain a card to your hand costing up 5 coins
//Put a card from your hand onto your deck
rule "Play Artisan card"
	when
		$player : Player( $username : username )
		$card : Artisan(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		Card cardToGain = null;
		System.out.println($username+" used "+$card.getName()+".");
		// gain a card to your hand costing up to 5 either from Treasure, Victory or Kingdom decks
		List<Card> ca = table.getAllCardsThatCanBeGainedUpToAmount(5);
		int randomInt = gameLogic.nextInt(ca.size());
		cardToGain = ca.get(randomInt);
		$player.getHand().add(cardToGain);
		table.decreaseDeckSize(cardToGain);
		// put a card from your hand onto your deck
		Collections.shuffle($player.getHand());
		Card cardToPutInDeck = null;
		randomInt = gameLogic.nextInt($player.getHand().size());
		cardToPutInDeck = $player.getHand().get(randomInt);
		//onto your deck means at the top of the deck, since we use remove(0) to draw, position 0 is the top
		$player.getDeck().add(0,cardToPutInDeck);
		$player.getHand().remove(randomInt);
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end

//Reveal cards from your deck until you reveal 2 treasure cards.
//Put those Treasure card into your hand
//and discard the other revealed cards
rule "Play Adventurer card"
	when
		$player : Player( $username : username )
		$card : Adventurer(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		// reveal cards from your deck until you reveal 2 Treasure cards
		// TODO: Draw from hand and print the log because revealed, until you have seen 2 treasure cards,
		// while you draw, discard the cards if they are not treasure cards
		// instead if they are treasure cards put them in the hand
		// put those Treasure cards into your hand and discard the other revealed cards
		Iterator<Card> it = $player.getDeck().iterator();
		while(it.hasNext()) {
			Card c = it.next();
			System.out.println($player.getUsername() + " reveals " + c.getName() + " from his deck");
			if(c instanceof Treasure) {
				//If it is a treasure add it to the hand
				$player.getHand().add(c);
				it.remove();
			} else {
				//Instead discard it
				$player.getDiscard().add(c);
				it.remove();
			}
		}
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end

//Gain a Gold.
//Each other player reveals the top 2 cards of their deck,
//trashes a revealed Treasure other than Copper
//and Discards the rest
rule "Play Bandit card"
	when
		$player : Player( $username : username )
		$opponents : List(  ) from collect ( Player( this != $player ) from players )
		$card : Bandit(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		
		
		//If an opponent has a reaction card it is not affected by the attack
		for(Iterator<Player> it = $opponents.iterator(); it.hasNext();) {
			Player opp = it.next();
			for(Card c : opp.getHand()) {
				if(c instanceof Kingdom && c.getSubtype().equals("Reaction")) {
					System.out.println(opp.getUsername() + " reveals " + c.getName() + " and is not affected by Bandit");
					it.remove();
					break;
				}
			}
		}
		
		// gain a Gold card
		gainIntoDiscardPile(table,$player,new Gold());
		// each other player reveals the tops 2 cards of their deck
		// he has to trash the revealed Tresure other than Copper 
		// he discards the rest.
		for(Player opp : ((List<Player>)$opponents)) {
			int i = 0;
			Iterator<Card> it = opp.getDeck().iterator();
			while(i < 2 && it.hasNext()) {
				Card c = it.next();
				System.out.println(opp.getUsername() + " reveals " + c.getName());
				if(c instanceof Treasure && !(c instanceof Copper)) {
					trashPile.add(c);
					it.remove();
					System.out.println(opp.getUsername() + " trashes " + c.getName());
				} else {
					$player.getDiscard().add(c);
					it.remove();
					System.out.println(opp.getUsername() + " discards " + c.getName());
				}
				i++;
			}
		}
		
		
		retract($opponents)
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end


//Gain a Silver onto your deck.
//Each other player reveals a Victory card
//from their hand and puts it onto their 
//deck (or reveals a hand with no victory cards).
rule "Play Bureaucrat card"
	when
		$player : Player( $username : username )
		$opponents : List(  ) from collect ( Player( this != $player ) from players )
		$card : Bureaucrat()
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		//It is a gainer which lets you gain Silver cards without buying them, 
		//and puts them on top of your deck so you can use them next turn; 
		//it also slows down your opponents by making them put Victory cards from 
		//their hands back on top of their deck.
		//$player.addToDeck();
		//	p.getHand().add(p.getDeck().remove(0));
		//for(Player p : ListaGiocatori){
		//while(p.
		//}
		// gain a silver onto your deck
		
		//If an opponent has a reaction card it is not affected by the attack
		for(Iterator<Player> it = $opponents.iterator(); it.hasNext();) {
			Player opp = it.next();
			for(Card c : opp.getHand()) {
				if(c instanceof Kingdom && c.getSubtype().equals("Reaction")) {
					System.out.println(opp.getUsername() + " reveals " + c.getName() + " and is not affected by Bandit");
					it.remove();
					break;
				}
			}
		}
		
		gainOntoDeck(table,$player,new Silver());
		
		for(Player opp : ((List<Player>)$opponents)) {
			Card cardToPutOntoDeck = null; int i = 0;
			for(; i < opp.getHand().size(); i++) {
				if(opp.getHand().get(i) instanceof Victory) {
					//Reveals a victory card from their hand
					System.out.println(opp.getUsername() + " reveals " + opp.getHand().get(i).getName());
					cardToPutOntoDeck = opp.getHand().get(i);
					break;
				}
			}
			if(i != 0) {
				//after revealing puts into onto their deck
				opp.getHand().remove(i);
				opp.getDeck().add(0,cardToPutOntoDeck);
			} else {
				//If no victory cards are present reveals the entire hand
				for(int j = 0; j < opp.getHand().size(); j++) {
				
					System.out.println(opp.getUsername() + " reveals " + opp.getHand().get(j).getName());
				}
			}
			
		}
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end



// + 1 Action
// Discard any number of card
// +1 Card per card discarded
rule "Play Cellar card"
	when
		$player : Player( $username : username )
		$card : Cellar( )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		addActions($player,1);
		//Choose a number between 0 and #CardInHand
		if($player.getHand().size() > 0) {
			int randomNumberOfCard = gameLogic.nextInt($player.getHand().size());
			//Discard #randomNumberOfCard
			discard($player,randomNumberOfCard);
			//Draw #randomNumberOfCard
			draw($player,randomNumberOfCard);
		}
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end

// +2 Coins
// You may immediately put your deck into your discard pile
rule "Play Chancellor card"
	when
		$player : Player( $username : username )
		$card : Chancellor(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		coin($player,2);
		// you have to put your deck onto your discard pile
		$player.getDiscard().addAll($player.getDeck());
		$player.getDeck().clear();
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end


// Trash up to 4 cards from your hand
rule "Play Chapel card"
	when
		$player : Player( $username : username )
		$card : Chapel(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		
		System.out.println($username+" used "+$card.getName()+".");
		// trash cards here, up to 4 from the hand
		int amount = gameLogic.nextInt(4);
		System.out.println($username + " will trash " + amount + " cards");
		Collections.shuffle($player.getHand());
		for(int i = 0; i < amount; i++) {
			Card c = $player.getHand().get(i);
			$player.getHand().remove(i);
			trashPile.add(c);
		}
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end

// +4 cards
// +1 buy
// each other player draws a card
rule "Play Councilroom card"
	when
		$player : Player( $username : username )
		$opponents : List(  ) from collect ( Player( this != $player ) from players )
		$card : Councilroom(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,4);
		addPurchase($player,1);
		// each other player draws a card
		for(Player opp : ((List<Player>)$opponents)) {
			draw(opp,1);
		}
		
		retract($opponents)
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end

//Trash this card.
//Gain a card costing up to 5 coins
rule "Play Feast card"
	when
		$player : Player( $username : username )
		$card : Feast(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		// trash this card
		$player.getHand().remove($card);
		trashPile.add($card);
		// gain a card costing up to 5
		List<Card> ca = table.getAllCardsThatCanBeGainedUpToAmount(5);
		Card cardToGainIntoDiscardPile = ca.get(gameLogic.nextInt(ca.size()));
		gainIntoDiscardPile(table,$player,cardToGainIntoDiscardPile);
		
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end

// +2 actions
// +1 buy
// +2 coins
rule "Play Festival card"
	when
		$player : Player( $username : username )
		$card : Festival(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,1);
		addPurchase($player,1);
		coin($player,2);
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end

// Worth 1 victory per 10 cards you have
// (round down)
/* GARDENS CARD WILL NOT BE PLAYED BECAUSE IS A VICTORY CARD
rule "Play Gardens card"
	when
		$player : Player( $username : username )
		$card : Gardens(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		retract($player)
		retract($card)
		retract($action)
end
*/

// +1 card
// +1 action
// Look through your discard pile.
// You may put a card from it onto your deck.
rule "Play Harbinger card"
	when
		$player : Player( $username : username )
		$card : Harbinger(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,1);
		addActions($player,1);
		// look through your discrda pile 
		int p = gameLogic.nextInt($player.getDiscard().size());
		Card pickFromDiscardPileAndPutOntoDeck = $player.getDiscard().get(p);
		// you may put a card from it onto your deck
		$player.getDiscard().remove(p);
		$player.getDeck().add(0,pickFromDiscardPileAndPutOntoDeck);
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end

// +2 cards
// +1 action
rule "Play Laboratory card"
	when
		$player : Player( $username : username )
		$card : Laboratory(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,2);
		addActions($player,1);
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end

//Draw until you have 7 cards in hand, skipping
// any Action cards you choose to; set those aside
// discarding them afterwards
rule "Play Library card"
	when
		$player : Player( $username : username )
		$card : Library(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		// draw until you have 7 cards in hand,
		//if you draw an action card you can either choose to discard
		//it or keep it. do this until you have 7 cards in hand
		while($player.getHand().size() < 7) {
			draw($player,1);
			boolean discardIt = gameLogic.nextBoolean();
			if($player.getHand().get($player.getHand().size()-1) instanceof Kingdom && discardIt) {
				$player.getDiscard().add($player.getHand().get($player.getHand().size()-1));
				$player.getHand().remove($player.getHand().size()-1);
			}
		}
		// skipping any Action cards you choose to
		// set them aside and discard them afterwards
		//draw($player,?);
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end


// +1 Card
// +1 Action
// +1 Buy
// +1 Coin
rule "Play Market card"
	when
		$player : Player( $username : username )
		$card : Market(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,1);
		addActions($player,1);
		addPurchase($player,1);
		coin($player,1);
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end


//You may trash a Treasure from your hand.
//Gain a Treasure to your hand costing up to 3 coins
//more than it
rule "Play Mine card"
	when
		$player : Player( $username : username )
		$card : Mine(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		
		//Selection of the Treasure
		Treasure selectedTreasureToTrash = null;
		for(Card card : $player.getHand()){
			if(card instanceof Treasure){
				selectedTreasureToTrash = (Treasure) card;
				break;
			}
		}
		
		//If I have selected a treasure from the hand
		if(selectedTreasureToTrash != null)
		{
			//trash the selectedTreasures
			trashPile.add(selectedTreasureToTrash);
			$player.getHand().remove(selectedTreasureToTrash);
						
			//If there are Gold card in the gold deck and the selectedTreasuresToTrash 
			// is not a copper I can gain a Gold deck
			//If i trash a copper, i can gain another treasure that costs
			//up to three, meaning I can only gain a Silver
			//The same way, if I trash a Silver, I can gain a Gold
			if(selectedTreasureToTrash instanceof Copper) {
				if(table.getSilverDeck().size() > 0) {
					$player.getHand().add(new Silver());
					table.decreaseDeckSize(new Silver());
				}
			} else if(selectedTreasureToTrash instanceof Silver) {
				if(table.getGoldDeck().size() > 0) {
					$player.getHand().add(new Gold());
					table.decreaseDeckSize(new Gold());
				}
			//If the random AI discards a gold treasure, we make it
			//pick again
			} else if(selectedTreasureToTrash instanceof Gold) {
				if(table.getGoldDeck().size() > 0) {
					$player.getHand().add(new Gold());
					table.decreaseDeckSize(new Gold());
				}
			}
			
			// CORRADO IO TI VOGLIO BENE MA QUESTO PEZZO DI
			//CODICE LO TROVO MOLTO INTRICATO
			//if(	!table.getGoldDeck().isEmpty() && 
			//	!(selectedTreasuresToTrash instanceof Copper)){
			//	$player.getHand().add(table.getGoldDeck().remove(0));
			//} else {
			//	//Try to gain a silver else a cooper
			//	try{
			//		$player.getHand().add(table.getSilverDeck().remove(0));
			//	}catch(Exception e){
			//		$player.getHand().add(table.getCopperDeck().remove(0));
			//	}
			//}
			
		}else{
			System.out.println($username+" has no treasure in his/her hand.");
		}
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end

//+1 card
//+1 action
//the first time you play a silver this turn
//+1 coin
rule "Play Merchant card"
	when
		$player : Player( $username : username )
		$card : Merchant(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,1);
		addActions($player,1);
		// the first time you play a Silver this turn 
		insert(Action.PENDINGSILVER);
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end


// +2 Coins
// Each other player discards down to 3 cards in his hand

//FAQ
//Players with 3 or fewer cards in hand do not discard any cards.
//Players with more cards discard until they only have 3.
rule "Play Militia card"
	when
		$player : Player( $username : username )
		$opponents : List(  ) from collect ( Player( this != $player ) from players )
		$card : Militia(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($opponents);
		//If an opponent has a reaction card it is not affected by the attack
		for(Iterator<Player> it = $opponents.iterator(); it.hasNext();) {
			Player opp = (Player)it.next();
			System.out.println(opp.getHand());
			for(Card c : opp.getHand()) {
				if(c.getName().equals("Moat")) {
					System.out.println(opp.getUsername() + " reveals " + c.getName() + " and is not affected by Militia");
					it.remove();
					break;
				}
			}
		}
		System.out.println("sono dopo il for per chi ha moat in militia");
		coin($player,2);
		for(Object player :  $opponents){
			Player p = (Player)player;
			
			if(p.getHand().size() > 3){
				discard(p, Math.abs(3-p.getHand().size()));
			} else {
				System.out.println(p.getUsername() + " already has 3 cards in hand");
			}
			
		}
		System.out.println("sono prima dei retract in militia");
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end

//Gain a card costing up to 4

//FAQ
//The card you gain comes from the Supply and is put into your discard pile.
rule "Play Workshop card"
	when
		$player : Player( $username : username )
		$card : Workshop(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		
		//Get all gainable card
		List<Card> listOfGainableCard = table.getAllCardsThatCanBeGainedUpToAmount(4);
		//Choose the card to gain between listOfGainableCard
		Card selectedCardToGain = listOfGainableCard.get(gameLogic.nextInt(listOfGainableCard.size()));
		//Add to discard pile the selected card
		$player.getDiscard().add(selectedCardToGain);
		//Remove to deck the selected card
		table.decreaseDeckSize(selectedCardToGain);
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end

// + 2 Cards
// When another player plays an Attack card,
// you may first reveal this from your hand, 
// to be unaffected by it
rule "Play Moat card"
	when
		$player : Player( $username : username )
		$card : Moat(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,2);
		// when amother player plays an Attack card, 
		// you can reveal it from your hand and 
		// Attack card doesn't affect you
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end


//You may trash a Copper from your hand for +3 coins
rule "Play Moneylender card"
	when
		$player : Player( $username : username )
		$card : Moneylender(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		// you may trash a Copper from your hand for 3 "virtual" coins
		Treasure selectedCopperToTrash = null;
		for(Card card : $player.getHand()){
			if(card instanceof Copper){
				selectedCopperToTrash = (Treasure) card;
				break;
			}
		}
		
		//If I have selected a treasure from the hand
		if(selectedCopperToTrash != null)
		{
			//trash the selectedTreasures
			trashPile.add(selectedCopperToTrash);
			$player.getHand().remove(selectedCopperToTrash);
			coin($player,3);
		} else {
			System.out.println($username+" has no copper in his/her hand.");
		}
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end


// +1 Card
// +1 Action
// +1 coin
// Discard a card per empty supply pile
rule "Play Poacher card"
	when
		$player : Player( $username : username )
		$card : Poacher(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,1);
		addActions($player,1);
		coin($player,1);
		// discard a card per empty supply card
		int amount = table.getNumberOfEmptySupplyDeck();
		discard($player,amount);
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end

//Trash a card from your hand.
//Gain a card costing up to 2 coins
//more than it
rule "Play Remodel card"
	when
		$player : Player( $username : username )
		$card : Remodel(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println("remodel hand size: " + $player.getHand().size());
		if($player.getHand().size() > 0) {
			int randomNumberOfCard = 0;
			try {
				randomNumberOfCard = gameLogic.nextInt($player.getHand().size());
				//Select a card to trash
			} catch(IllegalArgumentException e) {
				System.out.println("hand size used as bound: " + $player.getHand().size() + ", number random: " + randomNumberOfCard);
			}
			Card selectedCardToTrash = $player.getHand().remove(randomNumberOfCard);
			//Get all gainable card
			List<Card> listOfGainableCard = table.getAllCardsThatCanBeGainedUpToAmount(selectedCardToTrash.getCost()+2);
			
			if(listOfGainableCard.size() > 0) {
				trashPile.add(selectedCardToTrash);
				//Choose the card to gain between listOfGainableCard
				
				Card selectedCardToGain = listOfGainableCard.get(gameLogic.nextInt(listOfGainableCard.size()));
				//Add to discard pile the selected card
				$player.getDiscard().add(selectedCardToGain);
				//Remove to deck the selected card
				table.decreaseDeckSize(selectedCardToGain);
			} else {
				System.out.println("No cards can be gained");
			}
		} else {
			System.out.println($username+" has not any card in his/her hand.");
		}
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end

//+1 Card
//+1 Action
//Look at the top 2 cards of your deck.
//Trash and/or discard any number of them.
//Put the rest back on the top in any order
rule "Play Sentry card"
	when
		$player : Player( $username : username )
		$card : Sentry(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,1);
		addActions($player,1);
		// look at the top 2 card of your deck 
		// trash and/ot discard any number of them
		// put the rest back on top in any order
		List<Card> card0And1FromDeck = new ArrayList<Card>();
		for(int i = 0; i < 2; i++) {
			card0And1FromDeck.add($player.getDeck().remove(0));
		}
		Collections.reverse(card0And1FromDeck);
		for(int i = 0; i < 2; i++) {
			boolean putCardBack = gameLogic.nextBoolean();
			boolean trashOrDiscard = gameLogic.nextBoolean();
			if(putCardBack) {
				$player.getDeck().add(0,card0And1FromDeck.get(i));
			}else {
				//If it is true, the player trashes the card
				if(trashOrDiscard) {
					trashPile.add(card0And1FromDeck.get(i));
					//Here you do not remove the card from the tmp list
					//because you have already removed it from the deck
				} else {
					$player.getDiscard().add(card0And1FromDeck.get(i));
				}
			}
		}
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end


// +3 Cards
rule "Play Smithy card"
	when
		$player : Player( $username : username )
		$card : Smithy(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,3);
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end


//+1 card
//+1 action
//Each player (including you) reveals the top
//card of his deck and either discards it or puts it back, your choice
rule "Play Spy card"
	when
		$player : Player( $username : username )
		$opponents : List(  ) from collect ( Player( this != $player ) from players )
		$card : Spy(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,1);
		addActions($player,1);
		// tutti i giocatori rivelare una carta dal proprio deck 
		// possono decidere se scartarla o rimetterla al proprio posto
		
		//If an opponent has a reaction card it is not affected by the attack
		for(Iterator<Player> it = $opponents.iterator(); it.hasNext();) {
			Player opp = it.next();
			for(Card c : opp.getHand()) {
				if(c instanceof Kingdom && c.getSubtype().equals("Reaction")) {
					System.out.println(opp.getUsername() + " reveals " + c.getName() + " and is not affected by Bandit");
					it.remove();
					break;
				}
			}
		}
		
		//First the player reveals the top card of the deck, then the
		//Opponents do the same
		boolean discardOrPutBack = gameLogic.nextBoolean();
		Card revealedCard = $player.getDeck().remove(0);
		System.out.println($username + " reveals " + revealedCard.getName());
		if(discardOrPutBack) {
			$player.getDiscard().add(revealedCard);
		} else {
			$player.getDeck().add(0,revealedCard);
		}
		
		//Now the opponents will do the same, the one that are affected by
		//The attack
		for(Object player : $opponents) {
			Player opp = (Player)player;
			boolean oppDiscardOrPutBack = gameLogic.nextBoolean();
			Card oppRevealedCard = opp.getDeck().remove(0);
			System.out.println(opp.getUsername() + " reveals " + oppRevealedCard.getName());
			if(oppDiscardOrPutBack) {
				opp.getDiscard().add(oppRevealedCard);
			} else {
				opp.getDeck().add(0,oppRevealedCard);
			}
		}
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end

//Each other player reveals the top 2 card of his deck.
//If they revealed any treasure card, they trash one
//of them that you choose.
//You may gain any of all of thes trashed card.
//They discard the orger revealed cards
rule "Play Thief card"
	when
		$player : Player( $username : username )
		$opponents : List(  ) from collect ( Player( this != $player ) from players )
		$card : Thief(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		// each other player reveals the top 2 cards of his deck
		// if they revelead any treasure coards 
		// they trash one of them that you choose
		// you may gain any or all these thrashed cards
		// they discard the other revealed cards
		
		//If an opponent has a reaction card it is not affected by the attack
		for(Iterator<Player> it = $opponents.iterator(); it.hasNext();) {
			Player opp = it.next();
			for(Card c : opp.getHand()) {
				if(c instanceof Kingdom && c.getSubtype().equals("Reaction")) {
					System.out.println(opp.getUsername() + " reveals " + c.getName() + " and is not affected by Bandit");
					it.remove();
					break;
				}
			}
		}
		
		for(Object opponent : $opponents) {
			List<Card> revealedCards = new ArrayList<Card>();
			Player opp = (Player)opponent;
			for(int i = 0; i < 2; i++) {
				Card rc = opp.getDeck().remove(0);
				revealedCards.add(rc);
				System.out.println(opp.getUsername() + " reveals " + rc.getName());
			}
			//both revealed cards are treasure and I need to choose one to trash (and maybe gain)
			boolean trashOrTake = gameLogic.nextBoolean();
			//two treasures are revealed, i select one of the two
			if(revealedCards.get(0) instanceof Treasure && revealedCards.get(1) instanceof Treasure) {
				boolean oneOrTwo = gameLogic.nextBoolean();
				if(oneOrTwo) {
					Card rtc = revealedCards.remove(0);
					trashPile.add(rtc);
					System.out.println($username + " decided to trash " + rtc.getName());
					//put the other revealed card in discard pile of the opponent
					opp.getDiscard().add(revealedCards.remove(0));
				} else {
					//put the other revealed card in discard pile of the opponent
					opp.getDiscard().add(revealedCards.remove(0));
					//DIscard the first and trash the second
					Card rtc = revealedCards.remove(0);
					trashPile.add(rtc);
					System.out.println($username + " decided to trash " + rtc.getName());
					
				}
			//only one treasure is revealed, i trash the only one
			} else if(revealedCards.get(0) instanceof Treasure || revealedCards.get(1) instanceof Treasure){
				Card treasure = revealedCards.get(0) instanceof Treasure ? revealedCards.remove(0) : revealedCards.remove(1);
				trashPile.add(treasure);
				System.out.println($username + " decided to trash " + treasure.getName());
			}
			
			if(!trashOrTake) {
				System.out.println($username + " decided to pick trashed card");
				$player.getDiscard().add((Card)trashPile.remove(trashPile.size()-1));
			}
			
		}
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end

//You may play and Action card from 
//your hand twice
rule "Play Throne room card"
	when
		$player : Player( $username : username )
		$card : Throneroom(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		// you may play an Action card from your hand twice
		//first select the action from hand
		Collections.shuffle($player.getHand());
		for(Card c : $player.getHand()) {
			if(c instanceof Kingdom) {
				insert(c);
				insert(c);
				insert(Action.USE);
				insert(Action.USE);
				$player.getHand().remove(c);
				$player.getDiscard().add(c);
				break;
			}
		}
		//then put two times the tokens to activate it
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end


// +2 coins
// Discard the top card of your deck.
//If it's an Action card, you may play it
rule "Play Vassal card"
	when
		$player : Player( $username : username )
		$card : Vassal(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		coin($player,2);
		// discard the top card of your deck
		// if it's anAction card,
		// you may play it
		boolean playItOrNot = gameLogic.nextBoolean();
		
		Card topCardOfDeck = $player.getDeck().remove(0);
		if(topCardOfDeck instanceof Kingdom && playItOrNot) {
			insert(Action.USE);
			insert(topCardOfDeck);
		} else {
			$player.getDiscard().add(topCardOfDeck);
		}
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end


// +1 card
// +2 actions
rule "Play Village card"
	when
		$player : Player( $username : username )
		$card : Village(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,1);
		addActions($player,2);
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end

// +2 cards
// Each other player gains a Curse
rule "Play Witch card"
	when
		$player : Player( $username : username )
		$opponents : List(  ) from collect ( Player( this != $player ) from players )
		$card : Witch(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,2);
		// each other player gains a curse
		
		//If an opponent has a reaction card it is not affected by the attack
		for(Iterator<Player> it = $opponents.iterator(); it.hasNext();) {
			Player opp = it.next();
			for(Card c : opp.getHand()) {
				if(c instanceof Kingdom && c.getSubtype().equals("Reaction")) {
					System.out.println(opp.getUsername() + " reveals " + c.getName() + " and is not affected by Bandit");
					it.remove();
					break;
				}
			}
		}
		
		Iterator<Player> oppos = $opponents.iterator();
		//While there are curses to deliver to opponents
		while(table.checkDeckSize(new Curse()) > 0) {
			//Give the curse to next opponent
			if(oppos.hasNext()) {
				Player op = oppos.next();
				op.getDiscard().add(new Curse());
				table.decreaseDeckSize(new Curse());
			}
		}
		//The opponents that are outside this while are the luckiest!
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end


// +1 buy
// +2 coins
rule "Play Woodcutter card"
	when
		$player : Player( $username : username )
		$card : Woodcutter (  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		addPurchase($player,1);
		coin($player,2);
		
		retract($card)
		retract($action)
		//To refresh the firing of Action phase rule
		retract($phase)
		insert(Phase.ACTION);
end




//WIN RULE
rule "End game rule"
	salience 20
	when
		$phase : Phase( this == Phase.ENDGAME )
	then
		System.out.println("The game is finished . . .");
		//Sort ascendent the players (the class player implements Comparable)
		Collections.sort(players);
		//Reverse the list
		Collections.reverse(players);
		//Print the ranking
		System.out.println("***RANK***");
		for (int j = 0; j < players.size(); j++)
			System.out.println((j+1)+"-\t"+players.get(j));
		
		retract($phase);
end
			