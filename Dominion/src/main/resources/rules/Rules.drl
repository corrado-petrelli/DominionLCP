package rules

import com.project.Player;
import com.project.Action;
import com.project.Table;
import com.project.cards.Card;
import com.project.cards.kingdoms.*;
import com.project.cards.treasures.*;
import com.project.cards.victories.*;
import com.project.cards.curses.*;
import com.project.Phase;
import java.util.*;

//List of trash cards
global List<Card> trashPile;
//Random logic
global Random gameLogic;
//Actual player
global Player actualPlayer;
//Table
global Table table;
//Players
global List<Player> players;

/*
 _______  __   __  __    _  _______  _______  ___   _______  __    _  _______ 
|       ||  | |  ||  |  | ||       ||       ||   | |       ||  |  | ||       |
|    ___||  | |  ||   |_| ||       ||_     _||   | |   _   ||   |_| ||  _____|
|   |___ |  |_|  ||       ||       |  |   |  |   | |  | |  ||       || |_____ 
|    ___||       ||  _    ||      _|  |   |  |   | |  |_|  ||  _    ||_____  |
|   |    |       || | |   ||     |_   |   |  |   | |       || | |   | _____| |
|___|    |_______||_|  |__||_______|  |___|  |___| |_______||_|  |__||_______|
*/
//A Player *p* draw *amound* cards from the deck
function void draw(Player p, int amount) {
	if(p.getDeck().size() < amount) {
					int deckSize = p.getDeck().size();
					for(int h = 0; h < deckSize; h++)
						p.addToHand(p.getDeck().remove(0));
					// the remaining cards are drawn after shuffling together deck and discard
					Collections.shuffle(p.getDiscard());
					for (Card card : p.getDiscard()) {
						p.addToDeck(card);
					}
					p.getDiscard().clear();
					for(int j = 0; j < amount-deckSize; j++) 
						p.addToHand(p.getDeck().remove(0));
				} else 
					for(int j = 0; j < 5; j++) 
					p.addToHand(p.getDeck().remove(0));
	System.out.println(p.getUsername() + " drew " + amount + " cards.");
}

//A player *p* obtain *amount* virtual coins
function void coin(Player p, int amount) {
	p.setVirtualCoins(p.getVirtualCoins()+amount);
	System.out.println(p.getUsername() + " obtained " + amount + " coins and has a total of:" + p.getVirtualCoins());
}

//A player *p* buy a card *c*
function void buy(Player p, Card c) {
	p.getDiscard().add(c);
	System.out.println(p.getUsername() + " bought " + c.getName());
}

//A player *p* is cursed!
function void beCursed(Player p) {
	p.getDiscard().add(new com.project.cards.curses.Curse());
	System.out.println(p.getUsername() + " obtained a Curse");
}

//A player *p* discard *amount* card (in random way)
function void discard(Player p, int amount) {
	Random r = new Random();
	for(int i = 0; i < amount; i++) {
		p.getHand().remove(r.nextInt(p.getHand().size()));
	}
	System.out.println(p.getUsername() + " discarded " + amount + " cards.");
}

//A player *p* add from discard pile *amount* card in random way
function void addFromDiscardPile(Player p, int amount) {
	Random r = new Random();
	for(int i = 0; i < amount; i++) {
		Card c = p.getDiscard().remove(r.nextInt(p.getDiscard().size()));
		p.getHand().add(c);
		System.out.println(p.getUsername() + " added " + c.getName() + " from his/her discard pile.");
	}
	System.out.println(p.getUsername() + " added a total of " + amount + " cards from his/her discard pile.");
}


function void addActions(Player p, int amount) {
	p.setActions(p.getActions()+amount);
	System.out.println(p.getUsername() + " can do " + amount + " more actions.");
}


function void addPurchase(Player p, int amount) {
	p.setPurchases(p.getPurchases()+amount);
	System.out.println(p.getUsername() + " can purchase " + amount + " more cards.");
}

/*
function void trash(Player p, Card c) {
	p.getHand().remove(index);
	trashPile.add(c);
}
*/


rule "Switch Turn"
	salience 10
	when
		$action : Phase( this == Phase.ENDTURN )
	then
		//Get the index of actual player
		int indexActualPlayer = players.indexOf(actualPlayer);
		//If the actual player is the last player of the list
		if(indexActualPlayer == players.size() - 1){
			actualPlayer = (Player)players.get(0);
		} else {
			actualPlayer = (Player)players.get(indexActualPlayer+1);
		}
		//Initialize the number of Actions and Purchases to the default value (1)
		actualPlayer.setActions(1);
		actualPlayer.setPurchases(1);	
		//It modifies the situation variable of the situation (it is useful to 
		table.checkEndGame();	
end




rule "Choice Action Phase Rule"
	//According to us we must give an order:
	//	- Choice the card
	//	- Play the card
	//	- Until you have an available action
	salience 10
	when
		$action : Phase( this == Phase.ACTION )
	then
		Card kingdomCardToPlay = null;
		int randomInt;
		
		//CHOICE A RANDOM KINGDOM CARD FROM HAND
		kingdomCardToPlay = actualPlayer.extractKingdomCardFromHand();
		
		//If there is at least 1 kingdom card in the hand
		if(kingdomCardToPlay != null){
			//INSERT THE CARD TO PLAY IN THE WORKING MEMORY
			insert(Action.USE);
			insert(kingdomCardToPlay);
			
			if(actualPlayer.getActions() > 0){
				actualPlayer.decreaseActions();
			}
			else{
				//Change phases
				retract(Phase.ACTION);
				insert(Phase.PURCHASE);
			}
		}
		else{
			//Change phases
			retract(Phase.ACTION);
			insert(Phase.PURCHASE);
		}		
end



//WIN RULE
rule "End game rule"
	salience 20
	when
		$situation : Table( situation == 2 )
		$phase : Phase( this == Phase.ENDTURN )
	then
		System.out.println("The game is finished . . .");
		//Sort ascendent the players (the class player implements Comparable)
		Collections.sort(players);
		//Reverse the list
		Collections.reverse(players);
		//Print the ranking
		System.out.println("***RANK***");
		for (int j = 0; j < players.size(); j++)
			System.out.println((j+1)+"-\t"+players.get(j));
end


/*
 _______  __   __  __   __                                                  
|  _    ||  | |  ||  | |  |                                                 
| |_|   ||  | |  ||  |_|  |                                                 
|       ||  |_|  ||       |                                                 
|  _   | |       ||_     _|                                                 
| |_|   ||       |  |   |                                                   
|_______||_______|  |___|                                                                                              
*/

rule "Choice card to buy rule"
	when 
		$phase : Phase( this == Phase.PURCHASE )
	then
		Card cardToBuy = null;
		
		//Choice a card to buy randomly
		int randomInt = gameLogic.nextInt(7);
		
		switch (randomInt) {
			case 0:
				//Copper is free
				if(!table.getCopperDeck().isEmpty()){
					cardToBuy = table.getCopperDeck().remove(0);
				}
				break;
			case 1:
				if(!table.getSilverDeck().isEmpty()){
					if(actualPlayer.getVirtualCoins() >= 3){
						cardToBuy = table.getCopperDeck().remove(0);
					}
				}
				break;
			case 2:
				if(!table.getGoldDeck().isEmpty()){
					if(actualPlayer.getVirtualCoins() >= 6){
						cardToBuy = table.getGoldDeck().remove(0);
					}
				}
				break;
			case 3:
				if(!table.getDuchyDeck().isEmpty()){
					if(actualPlayer.getVirtualCoins() >= 5){
						cardToBuy = table.getDuchyDeck().remove(0);
					}
				}
				break;
			case 4:
				if(!table.getEstateDeck().isEmpty()){
					if(actualPlayer.getVirtualCoins() >= 2){
						cardToBuy = table.getEstateDeck().remove(0);
					}
				}
				break;
			case 5:
				if(!table.getProvinceDeck().isEmpty()){
					if(actualPlayer.getVirtualCoins() >= 8){
						cardToBuy = table.getProvinceDeck().remove(0);
					}
				}
				break;
			case 6:
				int randomIntKingdom;
				do{
					randomIntKingdom = gameLogic.nextInt(10);
					cardToBuy = actualPlayer.getKingdomCard(table,randomIntKingdom);
				}while(cardToBuy == null);
				break;
		}

		
		//If I choice a card (in the card is different to null so I can buy it 
		//because I've just control the actualplayer's coins
		if(cardToBuy != null){
			int count = 0;
			List<Treasure> treasuresToUse = new ArrayList<Treasure>();
			//Looking for the treasures to use (I don't implemented any particural algorithm)
			do{
				for(Card card : actualPlayer.getHand())
				{
					if(card instanceof Treasure)
					{
						count += card.getCost();
						treasuresToUse.add((Treasure)card);
					}
				}
			}while(count < cardToBuy.getCost());
			
			
			for(Treasure treasure : treasuresToUse){
				//Discard the selected treasures (from hand to discard deck)
				actualPlayer.getDiscard().add(treasure);
				actualPlayer.getHand().remove(treasure);
				//I remove the virtual coins of the discarded treasure
				actualPlayer.decreaseVirtualCoins(treasure.getCost());
			}
			
			//Add to hand the cardToBuy
			actualPlayer.getHand().add(cardToBuy);
			
			//If I buy a Treasure
			if(cardToBuy instanceof Treasure){
				Treasure cardTreasure = (Treasure)cardToBuy;
				actualPlayer.setVirtualCoins(actualPlayer.getVirtualCoins()+cardTreasure.getValue());
			}
			
			//If can I buy another card
			if(actualPlayer.getPurchases() > 0){
				actualPlayer.decreasePurchases();
			}
			//End of purchase phase
			else{
				retract(Phase.PURCHASE);
				insert(Phase.CLEANUP);
			}
		}
end




rule "Clean up phase rule"
	when
		$phase : Phase( this == Phase.CLEANUP )
	then
		// Actual player discard his/her hand and draw 5 new cards from the deck
		actualPlayer.getDiscard().addAll(actualPlayer.getHand());
		actualPlayer.getHand().clear();
		// Deck has less than 5 cards, so draw the size of the deck and the remaining from the discard pile
		if(actualPlayer.getDeck().size() < 5) {
			int size = actualPlayer.getDeck().size();
			int discardDraw = 5 - size;
			for(int i = 0; i < size; i++){
				actualPlayer.getHand().add(actualPlayer.getDeck().remove(0));
			}
			Collections.shuffle(actualPlayer.getDiscard());
			actualPlayer.getDeck().addAll(actualPlayer.getDiscard());
			actualPlayer.getDiscard().clear();
			for(int i = 0; i < discardDraw; i++){
				actualPlayer.getHand().add(actualPlayer.getDeck().remove(0));
			}
		} else {
			// Deck has 5 cards or more, normal draw
			for(int i = 0; i < 5; i++){
				actualPlayer.getHand().add(actualPlayer.getDeck().remove(0));
			}
		}
		
		retract(Phase.CLEANUP);
		insert(Phase.ENDTURN);
		
end


/*
 _______  ___      _______  __   __                         
|       ||   |    |   _   ||  | |  |                        
|    _  ||   |    |  |_|  ||  |_|  |                        
|   |_| ||   |    |       ||       |                        
|    ___||   |___ |       ||_     _|                        
|   |    |       ||   _   |  |   |                          
|___|    |_______||__| |__|  |___|                          
 ___   _  ___   __    _  _______  ______   _______  __   __ 
|   | | ||   | |  |  | ||       ||      | |       ||  |_|  |
|   |_| ||   | |   |_| ||    ___||  _    ||   _   ||       |
|      _||   | |       ||   | __ | | |   ||  | |  ||       |
|     |_ |   | |  _    ||   ||  || |_|   ||  |_|  ||       |
|    _  ||   | | | |   ||   |_| ||       ||       || ||_|| |
|___| |_||___| |_|  |__||_______||______| |_______||_|   |_|
*/



rule "Play Artisan card"
	salience 20
	when
		$table : Table(  )
		$card : Artisan(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		// gain a card to your hand costing up to 5 either from Treasure, Victory or Kingdom decks
		
		// put a card from your hand onto your deck
		retract($card)
		retract($action)
end


rule "Play Adventurer card"
	salience 20
	when
		$card : Adventurer(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		// reveal cards from your deck until you reveal 2 Treasure cards
		// put those Treasure cards into your hand and discard the other revealed cards
		retract($card)
		retract($action)
end

rule "Play Bandit card"
	salience 20
	when
		$card : Bandit(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		// gain a Gold card
		// each other player reveals the tops 2 cards of their deck 
		// he has to trash the revealed Tresure other than Copper 
		// he discards the rest.
		retract($card)
		retract($action)
end



rule "Play Bureaucrat card"
	salience 20
	when
		$card : Bureaucrat()
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		//It is a gainer which lets you gain Silver cards without buying them, 
		//and puts them on top of your deck so you can use them next turn; 
		//it also slows down your opponents by making them put Victory cards from 
		//their hands back on top of their deck.
		//$player.addToDeck();
		//	p.getHand().add(p.getDeck().remove(0));
		//for(Player p : ListaGiocatori){
		//while(p.
		//}
		retract($card)
		retract($action)
end



rule "Play Cellar card"
	salience 20
	when
		$card : Cellar( $amount : amount )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		discard(actualPlayer,$amount);
		draw(actualPlayer,$amount);
		retract($card)
		retract($action)
end

rule "Play Chancellor card"
	salience 20
	when
		$card : Chancellor(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		coin(actualPlayer,2);
		// you have to put your deck onto your discard pile
		retract($card)
		retract($action)
end



rule "Play Chapel card"
	salience 20
	when
		$card : Chapel( $amount : amount )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		// trash cards here
		retract($card)
		retract($action)
end


rule "Play Councilroom card"
	when
		$card : Councilroom(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		draw(actualPlayer,4);
		addPurchase(actualPlayer,1);
		// each other player draws a card
		retract($card)
		retract($action)
end





rule "Play Feast card"
	salience 20
	when
		$card : Feast(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		// trash this card 
		// gain a card costing up to 5 
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		addActions(actualPlayer,2);
		addPurchase(actualPlayer,1);
		coin(actualPlayer,2);
		retract($card)
		retract($action)
end


rule "Play Festival card"
	salience 20
	when
		$card : Festival(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		draw(actualPlayer,1);
		addPurchase(actualPlayer,1);
		coin(actualPlayer,2);
		retract($card)
		retract($action)
end


rule "Play Gardens card"
	salience 20
	when
		$card : Gardens(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		retract(actualPlayer)
		retract($card)
		retract($action)
end

/*
rule "Play Harbinger card"
	when
		$player : Player( $username : username )
		$card : Harbinger(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used Harbinger.");
		draw($player,1);
		addActions($player,1);
		if(gameLogic.nextBoolean()) {
			addFromDiscardPile($player,1);
		}
		retract($player)
		retract($card)
		retract($action)
end
*/
rule "Play Harbinger card"
	salience 20
	when
		$card : Harbinger(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		draw(actualPlayer,1);
		addActions(actualPlayer,1);
		// look through your discrda pile 
		// you may put a card from it into your deck
		retract($card)
		retract($action)
end

rule "Play Laboratory card"
	salience 20
	when
		$card : Laboratory(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		draw(actualPlayer,2);
		addActions(actualPlayer,1);
		retract($card)
		retract($action)
end


rule "Play Library card"
	salience 20
	when
		$card : Library(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		// draw until you have 7 cards in hand,
		int lastHandSize = actualPlayer.getHand().size();
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		draw(actualPlayer,Math.max(7,Math.abs(7-actualPlayer.getHand().size())));
		// skipping any Action cards you choose to
		// set them aside and discard them afterwards
		//draw($player,?);
		retract($card)
		retract($action)
end


rule "Play Market card"
	salience 20
	when
		$card : Market(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		draw(actualPlayer,1);
		addActions(actualPlayer,1);
		addPurchase(actualPlayer,1);
		coin(actualPlayer,1);
		retract($card)
		retract($action)
end


rule "Play Mine card"
	salience 20
	when
		$card : Mine(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		draw(actualPlayer,1);
		addActions(actualPlayer,1);
		addPurchase(actualPlayer,1);
		coin(actualPlayer,1);
		retract($card)
		retract($action)
end

rule "Play Merchant card"
	salience 20
	when
		$card : Merchant(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		draw(actualPlayer,1);
		addActions(actualPlayer,1);
		// the first time you play a Silver this turn 
		// coin($player,1);
		
		
		retract($card)
		retract($action)
end


rule "Play Militia card"
	salience 20
	when
		$card : Market(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
		//TODO I must insert player list
	then
		//for(Player p : ListGiocatori){
		//while(p.getHand().size()>3)
		//{
		//p.getHand().remove($card);
		//}
		//}
		coin(actualPlayer,2);
		
		retract($card)
		retract($action)
end


rule "Play Workshop card"
	salience 20
	when
		$card : Workshop(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		addPurchase(actualPlayer,1);
		coin(actualPlayer,2);
		
		retract($card)
		retract($action)
end



rule "Play Moat card"
	salience 20
	when
		$card : Moat(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		draw(actualPlayer,2);
		// when amother player plays an Attack card, 
		// you can reveal it from your hand and 
		// Attack card doesn't affect you
		
		retract($card)
		retract($action)
end


rule "Play Moneylender card"
	salience 20
	when
		$card : Moneylender(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		// you may trash a Copper from your hand for 3 
		
		retract($card)
		retract($action)
end


rule "Play Poacher card"
	when
		$card : Poacher(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		draw(actualPlayer,1);
		addActions(actualPlayer,1);
		coin(actualPlayer,1);
		// discard a card per empty supply card
		
		retract($card)
		retract($action)
end


rule "Play Remodel card"
	salience 20
	when
		$card : Chapel(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		buy(actualPlayer,$card);
		
		retract($card)
		retract($action)
end


rule "Play Sentry card"
	salience 20
	when
		$card : Sentry(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		draw(actualPlayer,1);
		addActions(actualPlayer,1);
		// look at the top 2 card of your deck 
		// trash and/ot discard any number of them
		// put the rest back on top in any order
		
		retract($card)
		retract($action)
end


rule "Play Smithy card"
	salience 20
	when
		$card : Smithy(  )
		// I need the action to understand what the player will do with that card
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		draw(actualPlayer,3);
		
		retract($card)
		retract($action)
end




rule "Play Spy card"
	salience 20
	when
		$card : Spy(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		draw(actualPlayer,1);
		addActions(actualPlayer,1);
		// tutti i giocatori rivelare una carta dal proprio deck 
		// possono decidere se scartarla o rimetterla al proprio posto
		
		retract($card)
		retract($action)
end

rule "Play Thief card"
	salience 20
	when
		$card : Thief(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		// each other player reveals the top 2 cards of his deck
		// if they revelead any treasure coards 
		// they trash one of them that you choose
		// you may gain any or all these thrashed cards
		// they discard the other revealed cards
		
		retract($card)
		retract($action)
end


rule "Play Throneroom card"
	salience 20
	when
		$card : Throneroom(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		// you may play an Action card from your hand twice
		
		retract($card)
		retract($action)
end



rule "Play Vassal card"
	salience 20
	when
		$card : Vassal(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		coin(actualPlayer,2);
		// discard the top card of your deck
		// if it's anAction card,
		// you may play it
		
		retract($card)
		retract($action)
end



rule "Play Village card"
	salience 20
	when
		$card : Village(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		draw(actualPlayer,1);
		addActions(actualPlayer,2);
		
		retract($card)
		retract($action)
end


rule "Play Witch card"
	salience 20
	when
		$card : Witch(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		draw(actualPlayer,2);
		// each other player gains a curse
		
		retract($card)
		retract($action)
end


rule "Play Woodcutter card"
	salience 20
	when
		$card : Village(  )
		$action : Action( this == Action.USE )
		$phase : Phase( this == Phase.ACTION )
	then
		System.out.println(actualPlayer.getUsername()+" used "+$card.getName()+".");
		buy(actualPlayer,$card);
		retract($card)
		retract($action)
end

