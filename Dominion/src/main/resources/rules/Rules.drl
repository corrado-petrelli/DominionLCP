package rules

import com.project.Player;
import com.project.Action;
import com.project.Phase;
import com.project.Table;
import com.project.cards.Card;
import com.project.cards.kingdoms.*;
import com.project.cards.treasures.*;
import com.project.cards.victories.*;
import com.project.cards.curses.*;
import java.util.*;

//List of trash cards
global List<Card> trashPile;
//Random logic
global Random gameLogic;
//Actual player if used as global variable is read only
//global Player actualPlayer;
//Table
global Table table;
//Players
global List<Player> players;

/*
 _______  __   __  __    _  _______  _______  ___   _______  __    _  _______ 
|       ||  | |  ||  |  | ||       ||       ||   | |       ||  |  | ||       |
|    ___||  | |  ||   |_| ||       ||_     _||   | |   _   ||   |_| ||  _____|
|   |___ |  |_|  ||       ||       |  |   |  |   | |  | |  ||       || |_____ 
|    ___||       ||  _    ||      _|  |   |  |   | |  |_|  ||  _    ||_____  |
|   |    |       || | |   ||     |_   |   |  |   | |       || | |   | _____| |
|___|    |_______||_|  |__||_______|  |___|  |___| |_______||_|  |__||_______|
*/
//A Player *p* draw *amound* cards from the deck
function void draw(Player p, int amount) {
	if(p.getDeck().size() < amount) {
					int deckSize = p.getDeck().size();
					for(int h = 0; h < deckSize; h++)
						p.addToHand(p.getDeck().remove(0));
					// the remaining cards are drawn after shuffling together deck and discard
					Collections.shuffle(p.getDiscard());
					for (Card card : p.getDiscard()) {
						p.addToDeck(card);
					}
					p.getDiscard().clear();
					for(int j = 0; j < amount-deckSize; j++) 
						p.addToHand(p.getDeck().remove(0));
				} else 
					for(int j = 0; j < 5; j++) 
					p.addToHand(p.getDeck().remove(0));
	System.out.println(p.getUsername() + " drew " + amount + " cards.");
}

//A player *p* obtain *amount* virtual coins
function void coin(Player p, int amount) {
	p.setVirtualCoins(p.getVirtualCoins()+amount);
	System.out.println(p.getUsername() + " obtained " + amount + " coins and has a total of:" + p.getVirtualCoins());
}

//A player *p* buy a card *c*
function void buy(Player p, Card c) {
	p.getDiscard().add(c);
	System.out.println(p.getUsername() + " bought " + c.getName());
}

//A player *p* is cursed!
function void beCursed(Player p) {
	p.getDiscard().add(new com.project.cards.curses.Curse());
	System.out.println(p.getUsername() + " obtained a Curse");
}

//A player *p* discard *amount* card (in random way)
function void discard(Player p, int amount) {
	Random r = new Random();
	for(int i = 0; i < amount; i++) {
		p.getHand().remove(r.nextInt(p.getHand().size()));
	}
	System.out.println(p.getUsername() + " discarded " + amount + " cards.");
}

//A player *p* add from discard pile *amount* card in random way
function void addFromDiscardPile(Player p, int amount) {
	Random r = new Random();
	for(int i = 0; i < amount; i++) {
		Card c = p.getDiscard().remove(r.nextInt(p.getDiscard().size()));
		p.getHand().add(c);
		System.out.println(p.getUsername() + " added " + c.getName() + " from his/her discard pile.");
	}
	System.out.println(p.getUsername() + " added a total of " + amount + " cards from his/her discard pile.");
}


function void addActions(Player p, int amount) {
	p.setActions(p.getActions()+amount);
	System.out.println(p.getUsername() + " can do " + amount + " more actions.");
}


function void addPurchase(Player p, int amount) {
	p.setPurchases(p.getPurchases()+amount);
	System.out.println(p.getUsername() + " can purchase " + amount + " more cards.");
}

/*
function void trash(Player p, Card c) {
	p.getHand().remove(index);
	trashPile.add(c);
}
*/


rule "Switch Turn"
	when
		$action : Phase( this == Phase.ENDTURN )
		actualPlayer : Player(  )
		not Action(  )
	then
		System.out.println(actualPlayer.getUsername() + " ended its turn");
		int indexActualPlayer = players.indexOf(actualPlayer);
		//If the actual player is the last player of the list
		if(indexActualPlayer == players.size() - 1){
			actualPlayer = (Player)players.get(0);
		} else {
			actualPlayer = (Player)players.get(indexActualPlayer+1);
		}
		System.out.println("Now it's the turn of " + actualPlayer.getUsername());
		//Reset the number of Actions and Purchases to the default value (1)
		actualPlayer.setActions(1);
		actualPlayer.setPurchases(1);
		retract($action);
		insert(Phase.ACTION);
		retract(actualPlayer);
		insert(actualPlayer);
end




rule "Action Phase Rule"
	no-loop
	//According to us we must give an order:
	//	1 - player choose the card from the hand
	//	2 - it Plays the card
	//	3 - Goto 1 and repeat until player has available actions
	salience 10
	when
		$state : Phase( this == Phase.ACTION )
		actualPlayer : Player(  )
		not Action(  )
	then
		System.out.println(actualPlayer.getUsername() + " Entered in action phase rule");
		while(actualPlayer.getActions() > 0) {
			Card kingdomCardToPlay = actualPlayer.getPlayableKingdomCardFromHand();
			if(kingdomCardToPlay != null)
				System.out.println("Card chosen, card is: " + kingdomCardToPlay);
			else
				System.out.println(actualPlayer.getUsername() + " has no Kingdom cards in hand");
			if(kingdomCardToPlay != null) {
				
					insert(Action.USE);
					insert(kingdomCardToPlay);
					actualPlayer.decreaseActions();
					System.out.println(actualPlayer.getUsername() + " played " + kingdomCardToPlay.getName());
				
				
			} else {
				System.out.println(actualPlayer.getUsername() + " skipped action phase");
				actualPlayer.setActions(0);
			}
		}
		retract($state);
		insert(Phase.PURCHASE);
end


/*
 _______  ___      _______  __   __                                                
|       ||   |    |   _   ||  | |  |                                               
|    _  ||   |    |  |_|  ||  |_|  |                                               
|   |_| ||   |    |       ||       |                                               
|    ___||   |___ |       ||_     _|                                               
|   |    |       ||   _   |  |   |                                                 
|___|    |_______||__| |__|  |___|                                                 
 _______  ______    _______  _______  _______  __   __  ______    _______  _______ 
|       ||    _ |  |       ||   _   ||       ||  | |  ||    _ |  |       ||       |
|_     _||   | ||  |    ___||  |_|  ||  _____||  | |  ||   | ||  |    ___||  _____|
  |   |  |   |_||_ |   |___ |       || |_____ |  |_|  ||   |_||_ |   |___ | |_____ 
  |   |  |    __  ||    ___||       ||_____  ||       ||    __  ||    ___||_____  |
  |   |  |   |  | ||   |___ |   _   | _____| ||       ||   |  | ||   |___  _____| |
  |___|  |___|  |_||_______||__| |__||_______||_______||___|  |_||_______||_______|
*/

/*
rule "Play Treasures card"
	when
		$player : Player( $username : username )
		$card : Treasure( $amount : value )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		coin($player,$amount);
		retract($player)
		retract($card)
		retract($action)
end
*/

rule "Play Treasure card"
	salience 10
	when
		$state : Phase( this == Phase.PURCHASE )
		actualPlayer : Player(  )
		$card : Treasure( $amount : value )
		$action : Action( this == Action.USE )
	then
		System.out.println("RUle for buying fired!");
		String username = actualPlayer.getUsername();
			System.out.println(username+" used "+$card.getName()+".");
			coin(actualPlayer,$amount);
		
		
		//retract($card)
		//retract($action)
end


/*
 _______  __   __  __   __                                                  
|  _    ||  | |  ||  | |  |                                                 
| |_|   ||  | |  ||  |_|  |                                                 
|       ||  |_|  ||       |                                                 
|  _   | |       ||_     _|                                                 
| |_|   ||       |  |   |                                                   
|_______||_______|  |___|                                                   
 __   __  ___   _______  _______  _______  ______    ___   _______  _______ 
|  | |  ||   | |       ||       ||       ||    _ |  |   | |       ||       |
|  |_|  ||   | |       ||_     _||   _   ||   | ||  |   | |    ___||  _____|
|       ||   | |       |  |   |  |  | |  ||   |_||_ |   | |   |___ | |_____ 
|       ||   | |      _|  |   |  |  |_|  ||    __  ||   | |    ___||_____  |
 |     | |   | |     |_   |   |  |       ||   |  | ||   | |   |___  _____| |
  |___|  |___| |_______|  |___|  |_______||___|  |_||___| |_______||_______|                                                                                               
*/
/*
rule "Buy Victories card"
	when
		$player : Player( $username : username )
		$card : Victory(  )
		$action : Action( this == Action.BUY )
	then
		buy($player,$card);
		retract($player)
		retract($card)
		retract($action)
end
*/

rule "Buy a general card"
	when
		$phase : Phase( this == Phase.PURCHASE )
		actualPlayer : Player(  )
		$action : Action( this == Action.BUY )
		$card : Card(  )
	then
		buy(actualPlayer,$card);
		retract($action);
		retract($card);
end



rule "Purchase Phase rule"
	salience 15
	when 
		$phase : Phase( this == Phase.PURCHASE )
		actualPlayer : Player(  )
		not Action(  )
	then
		System.out.println(actualPlayer.getUsername() + " passed to purchase phase");
		Card cardToBuy = null;
		if(actualPlayer.getPurchases() > 0) {
			
			//Choose a card to buy randomly from the 7 data structures holding decks in table
			List<Card> ca = table.getAllCardsThatCanBeBoughtWithAmountOfCoins(actualPlayer.getVirtualCoins());
			int randomInt = gameLogic.nextInt(ca.size());
			System.out.println("Card that will be bought is: " + ca.get(randomInt).getName());
			cardToBuy = ca.get(randomInt);
			System.out.println("Chosen card: " + cardToBuy);
			//If I choose a card
			if(cardToBuy != null){
				//I remove the virtual coins of the card
				actualPlayer.decreaseVirtualCoins(cardToBuy.getCost());
				actualPlayer.decreasePurchases();
				table.decreaseDeckSize(cardToBuy);
				insert(Action.BUY);
				insert(cardToBuy);
					
				
			}
		} else {
			retract($phase);
			insert(Phase.CLEANUP);
		}
end

rule "Cleanup phase rule"
	when
		$phase : Phase( this == Phase.CLEANUP )
		actualPlayer : Player(  )
		not Action(  )
	then
		System.out.println(actualPlayer.getUsername() + " is now on cleanup phase");
		draw(actualPlayer,5);
		//Check if end game conditions are satisifed at the end of each turn
		table.checkEndGame();
		retract($phase);
		insert(Phase.ENDTURN);
		
end



/*
 _______  ___      _______  __   __                         
|       ||   |    |   _   ||  | |  |                        
|    _  ||   |    |  |_|  ||  |_|  |                        
|   |_| ||   |    |       ||       |                        
|    ___||   |___ |       ||_     _|                        
|   |    |       ||   _   |  |   |                          
|___|    |_______||__| |__|  |___|                          
 ___   _  ___   __    _  _______  ______   _______  __   __ 
|   | | ||   | |  |  | ||       ||      | |       ||  |_|  |
|   |_| ||   | |   |_| ||    ___||  _    ||   _   ||       |
|      _||   | |       ||   | __ | | |   ||  | |  ||       |
|     |_ |   | |  _    ||   ||  || |_|   ||  |_|  ||       |
|    _  ||   | | | |   ||   |_| ||       ||       || ||_|| |
|___| |_||___| |_|  |__||_______||______| |_______||_|   |_|
*/

/*
rule "Play Witch card"
	when
		$player : Player( $username : username )
		$opponents : List(  )
		$card : Witch(  )
		$action : Action( this == Action.USE )
	then
		buy($player,$card);
		retract($player)
		retract($card)
		retract($action)
end
*/


/*
--------------------------------------
		PLAY AND BUY KINGDOMS
--------------------------------------
*/
rule "Play Artisan card"
	when
		$player : Player( $username : username )
		$table : Table(  )
		$card : Artisan(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		// gain a card to your hand costing up to 5 either from Treasure, Victory or Kingdom decks
		
		// put a card from your hand onto your deck
		retract($player)
		retract($card)
		retract($action)
end


rule "Play Adventurer card"
	when
		$player : Player( $username : username )
		$card : Adventurer(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		// reveal cards from your deck until you reveal 2 Treasure cards
		// put those Treasure cards into your hand and discard the other revealed cards
		retract($player)
		retract($card)
		retract($action)
end

rule "Play Bandit card"
	when
		$player : Player( $username : username )
		$card : Bandit(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		// gain a Gold card
		// each other player reveals the tops 2 cards of their deck 
		// he has to trash the revealed Tresure other than Copper 
		// he discards the rest.
		retract($player)
		retract($card)
		retract($action)
end



rule "Play Bureaucrat card"
	when
		$player : Player( $username : username )
		$card : Bureaucrat()
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		//It is a gainer which lets you gain Silver cards without buying them, 
		//and puts them on top of your deck so you can use them next turn; 
		//it also slows down your opponents by making them put Victory cards from 
		//their hands back on top of their deck.
		//$player.addToDeck();
		//	p.getHand().add(p.getDeck().remove(0));
		//for(Player p : ListaGiocatori){
		//while(p.
		//}
		retract($player)
		retract($card)
		retract($action)
end



rule "Play Cellar card"
	when
		$player : Player( $username : username )
		$card : Cellar( $amount : amount )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		discard($player,$amount);
		draw($player,$amount);
		retract($player)
		retract($card)
		retract($action)
end

rule "Play Chancellor card"
	when
		$player : Player( $username : username )
		$card : Chancellor(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		coin($player,2);
		// you have to put your deck onto your discard pile
		retract($player)
		retract($card)
		retract($action)
end



rule "Play Chapel card"
	when
		$player : Player( $username : username )
		$card : Chapel( $amount : amount )
		$action : Action( this == Action.USE )
	then
		
		System.out.println($username+" used "+$card.getName()+".");
		// trash cards here
		retract($player)
		retract($card)
		retract($action)
end


rule "Play Councilroom card"
	when
		$player : Player( $username : username )
		$card : Councilroom(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,4);
		addPurchase($player,1);
		// each other player draws a card
		retract($player)
		retract($card)
		retract($action)
end





rule "Play Feast card"
	when
		$player : Player( $username : username )
		$card : Feast(  )
		$action : Action( this == Action.USE )
	then
		// trash this card 
		// gain a card costing up to 5 
		System.out.println($username+" used "+$card.getName()+".");
		addActions($player,2);
		addPurchase($player,1);
		coin($player,2);
		retract($player)
		retract($card)
		retract($action)
end


rule "Play Festival card"
	when
		$player : Player( $username : username )
		$card : Festival(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,1);
		addPurchase($player,1);
		coin($player,2);
		retract($player)
		retract($card)
		retract($action)
end


rule "Play Gardens card"
	when
		$player : Player( $username : username )
		$card : Gardens(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		retract($player)
		retract($card)
		retract($action)
end

/*
rule "Play Harbinger card"
	when
		$player : Player( $username : username )
		$card : Harbinger(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used Harbinger.");
		draw($player,1);
		addActions($player,1);
		if(gameLogic.nextBoolean()) {
			addFromDiscardPile($player,1);
		}
		retract($player)
		retract($card)
		retract($action)
end
*/
rule "Play Harbinger card"
	when
		$player : Player( $username : username )
		$card : Harbinger(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,1);
		addActions($player,1);
		// look through your discrda pile 
		// you may put a card from it into your deck
		retract($player)
		retract($card)
		retract($action)
end

rule "Play Laboratory card"
	when
		$player : Player( $username : username )
		$card : Laboratory(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,2);
		addActions($player,1);
		retract($player)
		retract($card)
		retract($action)
end


rule "Play Library card"
	when
		$player : Player( $username : username )
		$card : Library(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		// draw until you have 7 cards in hand,
		int lastHandSize = $player.getHand().size();
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,Math.max(7,Math.abs(7-$player.getHand().size())));
		// skipping any Action cards you choose to
		// set them aside and discard them afterwards
		//draw($player,?);
		retract($player)
		retract($card)
		retract($action)
end


rule "Play Market card"
	when
		$player : Player( $username : username )
		$card : Market(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,1);
		addActions($player,1);
		addPurchase($player,1);
		coin($player,1);
		retract($player)
		retract($card)
		retract($action)
end


rule "Play Mine card"
	when
		$player : Player( $username : username )
		$card : Mine(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,1);
		addActions($player,1);
		addPurchase($player,1);
		coin($player,1);
		retract($player)
		retract($card)
		retract($action)
end

rule "Play Merchant card"
	when
		$player : Player( $username : username )
		$card : Merchant(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,1);
		addActions($player,1);
		// the first time you play a Silver this turn 
		// coin($player,1);
		retract($player)
		
		retract($card)
		retract($action)
end


rule "Play Militia card"
	when
		$player : Player( $username : username )
		$card : Market(  )
		$action : Action( this == Action.USE )
		//TODO I must insert player list
	then
		//for(Player p : ListGiocatori){
		//while(p.getHand().size()>3)
		//{
		//p.getHand().remove($card);
		//}
		//}
		coin($player,2);
		retract($player)
		retract($card)
		retract($action)
end


rule "Play Workshop card"
	when
		$player : Player( $username : username )
		$card : Workshop(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		addPurchase($player,1);
		coin($player,2);
		retract($player)
		retract($card)
		retract($action)
end
/*
 _______  __   __  __   __                                  
|  _    ||  | |  ||  | |  |                                 
| |_|   ||  | |  ||  |_|  |                                 
|       ||  |_|  ||       |                                 
|  _   | |       ||_     _|                                 
| |_|   ||       |  |   |                                   
|_______||_______|  |___|                                   
 ___   _  ___   __    _  _______  ______   _______  __   __ 
|   | | ||   | |  |  | ||       ||      | |       ||  |_|  |
|   |_| ||   | |   |_| ||    ___||  _    ||   _   ||       |
|      _||   | |       ||   | __ | | |   ||  | |  ||       |
|     |_ |   | |  _    ||   ||  || |_|   ||  |_|  ||       |
|    _  ||   | | | |   ||   |_| ||       ||       || ||_|| |
|___| |_||___| |_|  |__||_______||______| |_______||_|   |_|
*/


rule "Play Moat card"
	when
		$player : Player( $username : username )
		$card : Moat(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,2);
		// when amother player plays an Attack card, 
		// you can reveal it from your hand and 
		// Attack card doesn't affect you
		retract($player)
		retract($card)
		retract($action)
end


rule "Play Moneylender card"
	when
		$player : Player( $username : username )
		$card : Moneylender(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		// you may trash a Copper from your hand for 3 
		retract($player)
		retract($card)
		retract($action)
end


rule "Play Poacher card"
	when
		$player : Player( $username : username )
		$card : Poacher(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,1);
		addActions($player,1);
		coin($player,1);
		// discard a card per empty supply card
		retract($player)
		retract($card)
		retract($action)
end


rule "Play Remodel card"
	when
		$player : Player( $username : username )
		$card : Chapel(  )
		$action : Action( this == Action.BUY )
	then
		buy($player,$card);
		retract($player)
		retract($card)
		retract($action)
end


rule "Play Sentry card"
	when
		$player : Player( $username : username )
		$card : Sentry(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,1);
		addActions($player,1);
		// look at the top 2 card of your deck 
		// trash and/ot discard any number of them
		// put the rest back on top in any order
		retract($player)
		retract($card)
		retract($action)
end


rule "Play Smithy card"
	when
		$player : Player( $username : username )
		$card : Smithy(  )
		// I need the action to understand what the player will do with that card
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,3);
		retract($player)
		retract($card)
		retract($action)
end




rule "Play Spy card"
	when
		$player : Player( $username : username )
		$card : Spy(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,1);
		addActions($player,1);
		// tutti i giocatori rivelare una carta dal proprio deck 
		// possono decidere se scartarla o rimetterla al proprio posto
		retract($player)
		retract($card)
		retract($action)
end
rule "Play Thief card"
	when
		$player : Player( $username : username )
		$card : Thief(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		// each other player reveals the top 2 cards of his deck
		// if they revelead any treasure coards 
		// they trash one of them that you choose
		// you may gain any or all these thrashed cards
		// they discard the other revealed cards
		retract($player)
		retract($card)
		retract($action)
end


rule "Play Throneroom card"
	when
		$player : Player( $username : username )
		$card : Throneroom(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		// you may play an Action card from your hand twice
		retract($player)
		retract($card)
		retract($action)
end



rule "Play Vassal card"
	when
		$player : Player( $username : username )
		$card : Vassal(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		coin($player,2);
		// discard the top card of your deck
		// if it's anAction card,
		// you may play it
		retract($player)
		retract($card)
		retract($action)
end



rule "Play Village card"
	when
		$player : Player( $username : username )
		$card : Village(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,1);
		addActions($player,2);
		retract($player)
		retract($card)
		retract($action)
end


rule "Play Witch card"
	when
		$player : Player( $username : username )
		$card : Witch(  )
		$action : Action( this == Action.USE )
	then
		System.out.println($username+" used "+$card.getName()+".");
		draw($player,2);
		// each other player gains a curse
		retract($player)
		retract($card)
		retract($action)
end


rule "Play Woodcutter card"
	when
		$player : Player( $username : username )
		$card : Village(  )
		$action : Action( this == Action.BUY )
	then
		buy($player,$card);
		retract($player)
		retract($card)
		retract($action)
end




//WIN RULE
rule "End game rule"
	salience 20
	when
		$situation : Table( situation == 2 )
		$phase : Phase( this == Phase.ENDTURN )
	then
		System.out.println("The game is finished . . .");
		//Sort ascendent the players (the class player implements Comparable)
		Collections.sort(players);
		//Reverse the list
		Collections.reverse(players);
		//Print the ranking
		System.out.println("***RANK***");
		for (int j = 0; j < players.size(); j++)
			System.out.println((j+1)+"-\t"+players.get(j));
			
		
		
end
			